{"componentChunkName":"component---src-templates-blog-post-js","path":"/data-structure-linked-list-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"jarednielsen.com","author":"Jared Nielsen"}},"markdownRemark":{"id":"5b1c57a2-7426-5b06-8338-5238cd05bf6e","excerpt":"At some point in your career (today?!) you will want to learn data structures. It‚Äôs not just to ace the technical interview and land your dream job. Learning‚Ä¶","html":"<p>At some point in your career (today?!) you will want to learn data structures. It‚Äôs not just to ace the technical interview and land your dream job. Learning data structures will help you understand how software works and improve your problem-solving skills. In this tutorial, you will implement the Linked List data structure in JavaScript.</p>\n<h2>What is a Linked List?</h2>\n<p>A linked list is just that: a list that is linked. </p>\n<p>üôÑ</p>\n<p>Okay. A linked list is an ordered series of elements that are not necessarily stored in contiguous memory. </p>\n<p>‚òùÔ∏è</p>\n<p>Contiguous memory? </p>\n<p>In a compiled language, such as C++, the length of an array needs to be declared at runtime. When the program is executed, memory is allocated for the length of that array <em>continguously</em>, or side-by-side, whether or not anything is yet stored in the array. This makes for very fast and efficient access of elements. </p>\n<p>Elements in a linked list are generally referred to as <em>nodes</em>, although they are sometimes called elements or items, too. Each node contains a field that stores a value generally referred to as the <em>link</em> or <em>pointer</em>, which, you guessed it, <em>links</em> or <em>points</em> to the next node in the list. The <em>head</em> of a linked list is its first node and, depending on the implementation, the <em>tail</em> is either the last element or the series of elements that follow the head.</p>\n<p>A common analogy for Linked Lists is a train. The engine is the head and each car is a node. The train cars are <em>linked</em> together, but can be reordered by changing how the cars are linked.</p>\n<h3>Linked List Operations</h3>\n<p>There are numerous approaches to implementing a Linked List in JavaScript. The fundamental operations are: </p>\n<ul>\n<li>adding, or appending, nodes</li>\n<li>removing nodes</li>\n<li>inserting nodes</li>\n</ul>\n<p>Depending on the implementation, the <em>adding</em> and <em>inserting</em> operations may be one and the same. For the sake of simplicity, we‚Äôll keep them separate in this tutorial. In other implementatons, you may find the following operations: </p>\n<ul>\n<li>remove head</li>\n<li>repleace head </li>\n<li>remove tail</li>\n<li>insert before</li>\n<li>insert after </li>\n<li>find</li>\n</ul>\n<h2>What Problem(s) Do Linked Lists Solve?</h2>\n<ul>\n<li>In many programming languages (but not JavaScript), arrays are fixed in length, so it‚Äôs computationally expensive to add elements that exceed the memory allocation of the array as well as insert or remove elements, which may require reallocation of memory. </li>\n<li>Arrays in JavaScript are implemented as objects and thus less efficient than arrays in other languages. Unless you need random access to elements, a linked list may be more efficient than a one-dimensional array.</li>\n</ul>\n<h3>What Problem(s) Do Linked Lists Create?</h3>\n<ul>\n<li>Linked Lists use more memory than arrays due to their pointers. </li>\n<li>Linked Lists must be traversed sequentially.</li>\n</ul>\n<h2>Linked List Data Structure in JavaScript</h2>\n<p>Let‚Äôs implement a Linked List in JavaScript. The first question to answer is: what do we know about Linked Lists? </p>\n<p>A linked list is a sequential series of nodes. Each node in the list stores at least two fields: the value we want to store in the node and a pointer to the next node. We implement a linked list to solve the problem(s) that arrays create. So we can‚Äôt use an array. What <em>can</em> we use? </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{}</code></pre></div>\n<p>‚òùÔ∏è</p>\n<p>What does that look like?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> ‚Äú<span class=\"token constant\">I</span>‚Äôm a node<span class=\"token operator\">!</span>‚Äù<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But one node does not a list make! </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> nodeA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> ‚Äú<span class=\"token constant\">A</span> is <span class=\"token keyword\">for</span> algorithm‚Äù\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nodeB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> ‚Äú<span class=\"token constant\">B</span> is <span class=\"token keyword\">for</span> boolean‚Äù\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nodeC <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> ‚Äú<span class=\"token constant\">C</span> is <span class=\"token keyword\">for</span> cookie<span class=\"token operator\">!</span>‚Äù\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Still not a <em>list</em>. How do we <em>link</em> these? With a property:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> nodeA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n value<span class=\"token punctuation\">:</span> <span class=\"token string\">'A is for algorithm'</span><span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> nodeB\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">const</span> nodeB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n value<span class=\"token punctuation\">:</span> <span class=\"token string\">'B is for boolean'</span><span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> nodeC\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">const</span> nodeC <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n value<span class=\"token punctuation\">:</span> <span class=\"token string\">'C is for cookie!'</span><span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Why <code>null</code> and not <code>undefined</code>? Because <code>null</code> is an empty or non-existant value, whereas <code>undefined</code> has been declared but not yet assigned a value. </p>\n<p>The snippet above presents two problems. Can you spot them? </p>\n<p>First, if we attempt to access the <code>next</code> value in either <code>nodeA</code> or <code>nodeB</code>, we will get an error like the following: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cannot access &#39;nodeC&#39; before initialization</code></pre></div>\n<p>To resolve this, we can simply invert the declarations: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> nodeC <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n value<span class=\"token punctuation\">:</span> <span class=\"token string\">'C is for cookie!'</span><span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">const</span> nodeB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n value<span class=\"token punctuation\">:</span> <span class=\"token string\">'B is for boolean'</span><span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> nodeC\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">const</span> nodeA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n value<span class=\"token punctuation\">:</span> <span class=\"token string\">'A is for algorithm'</span><span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> nodeB\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But that‚Äôs not the real issue. We created three objects that link to each other, but we still didn‚Äôt create a list.</p>\n<p>What‚Äôs the solution? </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{}</code></pre></div>\n<p>‚òùÔ∏è</p>\n<p>Let‚Äôs create an object, <code>linkedList</code>, to contain our nodes. What is the first node in a Linked List? </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> linkedList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n head<span class=\"token punctuation\">:</span> nodeA\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What‚Äôs next? </p>\n<p>Exactly. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> linkedList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n head<span class=\"token punctuation\">:</span> nodeA<span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> nodeB\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now there‚Äôs a list! But what‚Äôs the problem with this implementation?</p>\n<p>It‚Äôs not self-contained. We want our objects nested in our Linked List. </p>\n<p>Let‚Äôs replace the variables with their values so we can see the structure. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> linkedList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n head<span class=\"token punctuation\">:</span> <span class=\"token string\">'A is for algorithm'</span><span class=\"token punctuation\">,</span>\n next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n   value<span class=\"token punctuation\">:</span> <span class=\"token string\">'B is for boolean'</span><span class=\"token punctuation\">,</span>\n   next<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n     value<span class=\"token punctuation\">:</span> <span class=\"token string\">'C is for cookie!'</span><span class=\"token punctuation\">,</span>\n     next<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What‚Äôs the pattern? </p>\n<p>Nested objects. </p>\n<p>Our goal now is to write a function, or functions, that return an object like this. How do we get there? </p>\n<p>Let‚Äôs create a helper class to create new nodes. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let‚Äôs verify that it works. If we declare and log a new Node:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Node { element: undefined, next: null }</span></code></pre></div>\n<p>Next, let‚Äôs declare our <code>LinkedList</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, let‚Äôs verify that it works. If we declare and log it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LinkedList { length: 0, head: null }</span></code></pre></div>\n<p>Now we need a method for adding elements to our Linked List. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    \n       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n      \n       current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n    \n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we append two elements:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">linkedList<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The log will return:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">LinkedList {\n  length: 2,\n  head: Node {\n    element: &#39;First&#39;,\n    next: Node { element: &#39;Second&#39;, next: null }\n  }\n}</code></pre></div>\n<p>Now let‚Äôs implement a <code>remove</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n    \n   <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n   <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n  \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>What‚Äôs happening here? </p>\n<p>First we check our head. If it‚Äôs not there, we return null.</p>\n<p>Then we check if the value stored in the head is the value we want to remove. If so, we reassign the value of the next node to the value of <code>head</code>. </p>\n<p>Next, we create a temporary variable, <code>current</code>, and assign it the value in our <code>head</code>. </p>\n<p>If the value of <code>current</code> is not equal to <code>null</code>, we iterate over our list using a <code>while</code> loop. </p>\n<p>If the next node is not equal to <code>null</code> <em>and</em> the value in the next node is not equal to the value we want to remove, then we reassign the value of <code>current</code> to the value of the next node. </p>\n<p>We repeat until our two conditions are not met. So, if the value of <code>current.next</code> is null <em>or</em> the value of <code>current.next.value</code> is the one we want to remove, we exit the <code>while</code> loop.</p>\n<p>Lastly, we check if the value of <code>current.next</code> is not equal to <code>null</code>. Why? Just in case. If the value we are looking to remove is not in the list, attempting to assign <code>current.next.next</code> to <code>current.next</code> will throw an error. </p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">TypeError: Cannot read property &#39;next&#39; of null</code></pre></div>\n<p>The last method we will write, and perhaps most important for Linked Lists, is <code>insert</code>. To implement <code>insert</code> in our Linked List, we need to know two things: </p>\n<ul>\n<li>the value to be inserted</li>\n<li>the position to insert the value</li>\n</ul>\n<p>There are countless approaches to implementing a Linked List, some using <code>insertBefore</code> and <code>insertAfter</code> and even <code>replaceHead</code> methods. For the sake of brevity, we‚Äôll implement an all purpose <code>insert</code> that inserts a value <em>before</em> an existing node making an assumption that we don‚Äôt want to change the head of our Linked List and inserting <em>after</em> would be redundant with our <code>append</code> method at the end of the list. </p>\n<p>What‚Äôs our approach? </p>\n<ul>\n<li>find the insertion position</li>\n<li>create a new node <em>before</em> the insert position and assign the <code>next</code> property to the <em>next</em> node</li>\n<li>assign the <code>next</code> property of the node <em>before</em> the insertion point to the new node</li>\n<li>update the length of the list</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pos<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n   <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n     current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n \n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our <code>insert</code> method accepts two arguments, <code>pos</code> and <code>value</code>. We first initialize a temp variable, <code>current</code>, and assign it the value of our <code>head</code>. </p>\n<p>The structure is similar to our <code>remove</code> method. </p>\n<p>We first need to find <code>pos</code>. We do so with a <code>while</code> loop. If the value of <code>current.next</code> is not <code>null</code> <em>and</em> the value of <code>current.next.value</code> is not equal to <code>pos</code>, then we iterate over our list. With each iteration, we reassign the value of <code>current</code> to the value of <code>current.next</code>. We exit the <code>while</code> loop when one of our conditions return false, meaning we did or did not find <code>pos</code>. </p>\n<p>Next we check if there‚Äôs a value in <code>current.next</code> <em>or</em> if <code>current.next.value</code> does not equal <code>pos</code>. This is to catch edge cases so we don‚Äôt insert our new node in the wrong position. If neither of those return <code>true</code>, then we create a new <code>node</code> and do the ol‚Äô switcheroo by assigning the value of its <code>next</code> to the value of <code>current.next</code>. and then assigning the value of <code>current.next</code> the new <code>node</code>. </p>\n<p>Lastly, we increase the length of the list by 1. </p>\n<h2>Big O &#x26; Linked List Data Structures</h2>\n<p>What is the order of a Linked List? </p>\n<p>For access and search, the order of a Linked List is O(n). In our implementation, the order of our insert and remove methods is also O(n) as they both require iteration. But there are (more involved) approaches to Linked Lists where the insert and remove methods are O(1). </p>\n<h2>Learn JavaScript Linked List Data Structure</h2>\n<p>In this tutorial, you learned the Linked List data structure in JavaScript. There are several classic and common interview questions using Linked Lists, including:</p>\n<ul>\n<li>Reverse a Linked List</li>\n<li>Detect a loop in a Linked List (i.e: nodes that link to each other)</li>\n<li>Remove duplicates from a Linked List</li>\n</ul>\n<p>In the next tutorial, we‚Äôll learn how to implement a Hash Table. Stay tuned!</p>","frontmatter":{"title":"JavaScript Linked List Data Structure","date":"June 19, 2020","description":"Learning data structures will help you understand how software works and improve your problem-solving skills. In this tutorial, you will implement the linked list data structure in JavaScript."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/data-structure-linked-list-javascript/","previous":{"fields":{"slug":"/data-structure-queue-javascript/"},"frontmatter":{"title":"JavaScript Queue Data Structure"}},"next":null}}}